{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### **---LATIHAN-LATIHAN PERTEMUAN KE-4---**"
      ],
      "metadata": {
        "id": "F9x_JRHqljxN"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "US_hCa8xldb9",
        "outputId": "c5f71f71-d20b-4662-c4d1-e9389ee1fd9d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3 2 1\n"
          ]
        }
      ],
      "source": [
        "#swap function\n",
        "var1 = 1\n",
        "var2 = 2\n",
        "var3 = 3\n",
        "var1, var2, var3 = var3, var2, var1\n",
        "print(var1, var2, var3)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list = [25, 21, 22, 24, 23, 27, 26]\n",
        "lastElementIndex = len(list)-1\n",
        "print(0, list)\n",
        "for idx in range(lastElementIndex):\n",
        "  if list[idx]>list[idx+1]:\n",
        "    list[idx], list[idx+1]=list[idx+1], list[idx]\n",
        "  print(idx+1, list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FNbJpEtLmfrQ",
        "outputId": "357f842c-4b92-4b6f-85f5-478ab97ef5c8"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 [25, 21, 22, 24, 23, 27, 26]\n",
            "1 [21, 25, 22, 24, 23, 27, 26]\n",
            "2 [21, 22, 25, 24, 23, 27, 26]\n",
            "3 [21, 22, 24, 25, 23, 27, 26]\n",
            "4 [21, 22, 24, 23, 25, 27, 26]\n",
            "5 [21, 22, 24, 23, 25, 27, 26]\n",
            "6 [21, 22, 24, 23, 25, 26, 27]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def bubble_sort(arr):\n",
        "    n = len(arr)\n",
        "\n",
        "    for i in range(n):\n",
        "        # Membuat variabel boolean untuk menandai apakah ada pertukaran dalam iterasi ini\n",
        "        swapped = False\n",
        "\n",
        "        # Iterasi melalui elemen-elemen yang belum terurut\n",
        "        for j in range(0, n-i-1):\n",
        "            # Jika elemen saat ini lebih besar daripada elemen berikutnya, tukar mereka\n",
        "            if arr[j] > arr[j+1]:\n",
        "                arr[j], arr[j+1] = arr[j+1], arr[j]\n",
        "                swapped = True\n",
        "\n",
        "        # Jika tidak ada pertukaran dalam iterasi ini, berarti deret sudah terurut\n",
        "        if not swapped:\n",
        "            break\n",
        "\n",
        "# Deret bilangan yang akan diurutkan\n",
        "arr = [100, 20, 60, 90, 40, 30, 10]\n",
        "\n",
        "# Memanggil fungsi bubble_sort untuk mengurutkan deret bilangan\n",
        "bubble_sort(arr)\n",
        "\n",
        "# Mencetak deret bilangan yang sudah terurut\n",
        "print(\"Deret bilangan setelah diurutkan:\")\n",
        "print(arr)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XVqyuGJEoudB",
        "outputId": "ff60f841-e41f-4d1f-80ed-548c95e44727"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Deret bilangan setelah diurutkan:\n",
            "[10, 20, 30, 40, 60, 90, 100]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def insertion_sort(arr):\n",
        "    for i in range(1, len(arr)):\n",
        "        key = arr[i]  # Mengambil elemen saat ini yang akan dimasukkan ke posisi yang benar\n",
        "        j = i - 1  # Inisialisasi indeks untuk membandingkan dengan elemen sebelumnya\n",
        "\n",
        "        # Memindahkan elemen-elemen yang lebih besar dari key ke kanan\n",
        "        while j >= 0 and key < arr[j]:\n",
        "            arr[j + 1] = arr[j]\n",
        "            j -= 1\n",
        "\n",
        "        # Menempatkan key ke posisi yang benar\n",
        "        arr[j + 1] = key\n",
        "\n",
        "# Deret bilangan yang akan diurutkan\n",
        "arr = [89, 12, 57, 16, 25, 11, 75]\n",
        "\n",
        "# Memanggil fungsi insertion_sort untuk mengurutkan deret bilangan\n",
        "insertion_sort(arr)\n",
        "\n",
        "# Mencetak deret bilangan yang sudah terurut\n",
        "print(\"Deret bilangan setelah diurutkan:\")\n",
        "print(arr)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PqvqxFd_pm6T",
        "outputId": "0fa3a02d-b178-44e2-860b-115001c04464"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Deret bilangan setelah diurutkan:\n",
            "[11, 12, 16, 25, 57, 75, 89]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def selection_sort(arr):\n",
        "    n = len(arr)\n",
        "\n",
        "    for i in range(n):\n",
        "        # Temukan indeks elemen terkecil yang belum terurut\n",
        "        min_idx = i\n",
        "        for j in range(i+1, n):\n",
        "            if arr[j] < arr[min_idx]:\n",
        "                min_idx = j\n",
        "\n",
        "        # Tukar elemen terkecil dengan elemen pertama dalam deret yang belum terurut\n",
        "        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n",
        "\n",
        "# Deret bilangan yang akan diurutkan\n",
        "arr = [89, 12, 57, 16, 25]\n",
        "\n",
        "# Memanggil fungsi selection_sort untuk mengurutkan deret bilangan\n",
        "selection_sort(arr)\n",
        "\n",
        "# Mencetak deret bilangan yang sudah terurut\n",
        "print(\"Deret bilangan setelah diurutkan secara ascending:\")\n",
        "print(arr)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wfYwfZoeqTYB",
        "outputId": "68b6b506-10fd-44e6-9028-85f2622f69cc"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Deret bilangan setelah diurutkan secara ascending:\n",
            "[12, 16, 25, 57, 89]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def linear_search(arr, target):\n",
        "    for i in range(len(arr)):\n",
        "        if arr[i] == target:\n",
        "            return i  # Mengembalikan indeks pertama di mana target ditemukan\n",
        "    return -1  # Mengembalikan -1 jika target tidak ditemukan dalam deret\n",
        "\n",
        "# Deret huruf yang akan dicari huruf \"a\"-nya\n",
        "arr = ['y', 'u', 'i', 'w', 'o', 'a', 'q', 'u', 'j', 'p']\n",
        "target = 'a'\n",
        "\n",
        "# Memanggil fungsi linear_search untuk mencari huruf \"a\"\n",
        "result = linear_search(arr, target)\n",
        "\n",
        "if result != -1:\n",
        "    print(f\"'{target}' ditemukan di indeks {result}\")\n",
        "else:\n",
        "    print(f\"'{target}' tidak ditemukan dalam deret huruf\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QduXS-8eqbkU",
        "outputId": "8df30629-98d8-47d7-a33c-5cc77e5898d5"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'a' ditemukan di indeks 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def cari_a(arr):\n",
        "    for huruf in arr:\n",
        "        if huruf == 'a':\n",
        "            return True\n",
        "    return False\n",
        "\n",
        "# Program Utama\n",
        "huruf = ['y', 'u', 'i', 'w', 'o', 'a', 'q', 'u', 'j', 'p']\n",
        "hasil = cari_a(huruf)\n",
        "\n",
        "if hasil:\n",
        "    print(\"'a' ditemukan dalam daftar\")\n",
        "else:\n",
        "    print(\"'a' tidak ditemukan dalam daftar\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "182Nen6DrHEJ",
        "outputId": "4c1edc0f-ae14-444e-ba3c-371fbfeedd71"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'a' ditemukan dalam daftar\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "def IntPolSearch(list, x):\n",
        "  idx0 = 0\n",
        "  idxn = (len(list) - 1)\n",
        "  found = False\n",
        "\n",
        "  while idx0 <= idxn and x >= list[idx0] and  x <= list[idxn]:\n",
        "\n",
        "    # Find the mid point\n",
        "    mid = idx0 + int(((float(idxn - idx0) / (list[idxn] - list[idx0])) * (x - list[idx0])))\n",
        "\n",
        "    # Compare the value at mid point with search value\n",
        "    if list[mid] == x:\n",
        "      found = True\n",
        "      return found\n",
        "\n",
        "    if list[mid] < x:\n",
        "      idx0 = mid + 1\n",
        "  return found\n",
        "\n",
        "list = [3,6,9,2,1,89,45]\n",
        "sorted_list = bubble_sort(list)\n",
        "print(IntPolSearch(list, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xFsh0WHCrHYg",
        "outputId": "ba1bf594-e0b1-4ebc-8dc4-40bb55aa9321"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    }
  ]
}

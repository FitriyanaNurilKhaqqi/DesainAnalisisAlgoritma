{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-1 ===**"
      ],
      "metadata": {
        "id": "iKS7--3ud4Tn"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZFEdRzh5PQKj"
      },
      "outputs": [],
      "source": [
        "def divideAndConquer_Max (arr, ind, len):\n",
        "  maximum = -1;\n",
        "\n",
        "  if (ind >= len - 2):\n",
        "    if (arr[ind] > arr[ind + 1]):\n",
        "      return arr[ind];\n",
        "    else:\n",
        "      return arr[ind + 1];\n",
        "\n",
        "  maximum = divideAndConquer_Max (arr, ind + 1, len);\n",
        "\n",
        "  if (arr[ind] > maximum):\n",
        "    return arr[ind];\n",
        "  else:\n",
        "    return maximum;"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def divideAndConquer_Min (arr, ind, len):\n",
        "  minimum = 0;\n",
        "\n",
        "  if (ind >= len - 2):\n",
        "    if (arr[ind]< arr[ind + 1]):\n",
        "      return arr[ind];\n",
        "    else:\n",
        "      return arr[ind + 1];\n",
        "\n",
        "  minimum = divideAndConquer_Min (arr, ind + 1, len);\n",
        "\n",
        "  if (arr[ind] < minimum):\n",
        "    return arr[ind];\n",
        "  else:\n",
        "    return minimum;"
      ],
      "metadata": {
        "id": "fG0FfcEpPrZP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "minimum, maximum = 0, -1;\n",
        "# array initialization\n",
        "arr = [4,12,23,9,21,1,35,2,24];\n",
        "maximum = divideAndConquer_Max(arr, 0, 9);\n",
        "minimum = divideAndConquer_Min (arr, 0, 9);\n",
        "print(\"The minimum number in the array is: \", minimum);\n",
        "print(\"The maximum number in the array is: \", maximum);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zKe9VD_XPn70",
        "outputId": "b8584791-6554-4f59-9f96-9240bb94181d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The minimum number in the array is:  1\n",
            "The maximum number in the array is:  35\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-2 ===**"
      ],
      "metadata": {
        "id": "MuCBkY8Bds1K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# MergeSort in Python\n",
        "def mergeSort(array):\n",
        "  if len(array) > 1:\n",
        "\n",
        "      # r is the point where the array is divided into two subarrays\n",
        "      r = len(array)//2\n",
        "      L = array[:r]\n",
        "      M = array[r:]\n",
        "\n",
        "      # Sort the two halves\n",
        "      mergeSort(L)\n",
        "      mergeSort (M)\n",
        "\n",
        "      i = j = k = 0\n",
        "\n",
        "      # Until we reach either end of either L or M, pick larger among\n",
        "      # elements L and M and place them in the correct position at A[p..r]\n",
        "      while i < len(L) and j < len(M):\n",
        "          if L[i] < M[j]:\n",
        "              array[k] = L[i]\n",
        "              i += 1\n",
        "          else:\n",
        "              array[k] = M[j]\n",
        "              j += 1\n",
        "          k += 1\n",
        "      # When we run out of elements in either L or M,\n",
        "      # pick up the remaining elements and put in A[p..r]\n",
        "      while i < len(L):\n",
        "        array[k] = L[i]\n",
        "        i += 1\n",
        "        k += 1\n",
        "\n",
        "      while j < len(M):\n",
        "        array[k] = M[j]\n",
        "        j += 1\n",
        "        k += 1\n"
      ],
      "metadata": {
        "id": "4yazgERkPeRP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the array\n",
        "def printList (array):\n",
        "  for i in range(len(array)):\n",
        "    print (array[i], end=\" \")\n",
        "  print()\n",
        "\n",
        "# Driver program\n",
        "array = [4,12,23,9,21,1,35,2,24]\n",
        "mergeSort(array)\n",
        "\n",
        "print(\"Sorted array is: \")\n",
        "print(list (array))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aiQw6EVKXKW1",
        "outputId": "4176baf0-1663-4ba2-bf1e-ed9a63486024"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted array is: \n",
            "[1, 2, 4, 9, 12, 21, 23, 24, 35]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-3 ===**"
      ],
      "metadata": {
        "id": "Sy9hcLCzmrna"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Function to find the partition position\n",
        "def partition (array, low, high):\n",
        "# choose the rightmost element as pivot\n",
        "  pivot = array[high]\n",
        "# pointer for greater element\n",
        "  i = low - 1\n",
        "# traverse through all elements # compare each element with pivot\n",
        "  for j in range(low, high):\n",
        "    if array[j] <= pivot:\n",
        "# If element smaller than pivot is found\n",
        "# swap it with the greater element pointed by i\n",
        "      i = i + 1\n",
        "# Swapping element at i with element at j\n",
        "      (array[i], array[j]) = (array[j], array[i])\n",
        "# Swap the pivot element with the greater element specified by i\n",
        "  (array[i+1], array[high]) = (array[high], array[i + 1])\n",
        "# Return the position from where partition is done\n",
        "  return i + 1"
      ],
      "metadata": {
        "id": "C7EN3SaOhdsp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# function to perform quicksort\n",
        "def quickSort (array, low, high):\n",
        "  if low < high:\n",
        "# Find pivot element such that\n",
        "# element smaller than pivot are on the left # element greater than pivot are on the right\n",
        "    pi = partition(array, low, high)\n",
        "# Recursive call on the left of pivot\n",
        "    quickSort (array, low, pi - 1)\n",
        "# Recursive call on the right of pivot\n",
        "    quickSort (array, pi + 1, high)"
      ],
      "metadata": {
        "id": "r-y0CGwBhy_v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data = [4,12,23,9,21,1,35,2,24]\n",
        "print(\"Unsorted Array\")\n",
        "print(data)\n",
        "size= len(data)\n",
        "quickSort(data, 0, size - 1)\n",
        "print('Sorted Array in Ascending Order:')\n",
        "print(data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CokEQHkWh-8u",
        "outputId": "32687ae2-4d4b-4802-8b01-b910b388cb40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unsorted Array\n",
            "[4, 12, 23, 9, 21, 1, 35, 2, 24]\n",
            "Sorted Array in Ascending Order:\n",
            "[1, 2, 4, 9, 12, 21, 23, 24, 35]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-4 ===**"
      ],
      "metadata": {
        "id": "IcM_Mf-xmvwx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def countInversion(arr):\n",
        "    result = 0\n",
        "    for i in range(len(arr)):\n",
        "        for j in range(i + 1, len(arr)):\n",
        "            if arr[i] > arr[j]:\n",
        "                result += 1\n",
        "    return result\n"
      ],
      "metadata": {
        "id": "yH6jDRISloh7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr=[21,70,36,14,25]\n",
        "result=countInversion(arr)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zFoyKrpwl04J",
        "outputId": "a27ef50b-5d60-4277-c4b7-2ca271c74dd7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-5 ===**"
      ],
      "metadata": {
        "id": "w8ZKYrUTmxe1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def countInversion(arr):\n",
        "  icount = 0\n",
        "  if len(arr) <= 1:\n",
        "    return icount\n",
        "\n",
        "  mid = len(arr)//2\n",
        "  left = arr [:mid]\n",
        "  right = arr [mid:]\n",
        "  icount += countInversion(left)\n",
        "  icount += countInversion(right)\n",
        "  i = j = k = 0\n",
        "\n",
        "  #print (left)\n",
        "  #print (right)\n",
        "  while i < len(left) and j < len(right):\n",
        "    if left [i] <  right [j]:\n",
        "      arr [k] = left [i]\n",
        "      i = i + 1\n",
        "    else:\n",
        "      #print (left[i], right [j])\n",
        "      arr[k] = right [j]\n",
        "      j = j + 1\n",
        "      icount += (mid -i)\n",
        "    k = k + 1\n",
        "  while i < len(left):\n",
        "    arr[k] = left[i]\n",
        "    i = i + 1\n",
        "    k = k + 1\n",
        "  while j < len(right):\n",
        "    arr[k] = right [j]\n",
        "    j = j + 1\n",
        "    k = k + 1\n",
        "\n",
        "  return icount"
      ],
      "metadata": {
        "id": "CMkchFvEmWQI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr = [1, 20, 6, 4, 5]\n",
        "result = countInversion(arr)\n",
        "print (result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d6iD-7Wnm6IM",
        "outputId": "12f0a383-8fd8-49a3-aeac-0022242e00cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-6 ===**"
      ],
      "metadata": {
        "id": "ubL2EVgOnOZ-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Tanpa divide dan conquer\n",
        "def maxSubSum(arr):\n",
        "  max_so_far=0\n",
        "  max_ending_here=0\n",
        "  for i in range(len(arr)):\n",
        "    max_ending_here+=arr[i]\n",
        "    if max_ending_here>max_so_far:\n",
        "      max_so_far=max_ending_here\n",
        "    if max_ending_here<0:\n",
        "      max_ending_here=0\n",
        "  return max_so_far"
      ],
      "metadata": {
        "id": "lNKMUlJipfmi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr=[-2, -5, 6, -2, -3, 1, 5, -6]\n",
        "result=maxSubSum(arr)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dOK_KNwEq5HI",
        "outputId": "53ea4404-945a-4553-f676-025cdebfefbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-7 ===**"
      ],
      "metadata": {
        "id": "jiiI8Kz0rde8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Menggunakan Divide and Conquer\n",
        "def maxCrossingSum(arr, low,mid, high):\n",
        "  result=0; leftSum=float('-infinity')\n",
        "  for i in range(mid, low-1,-1):\n",
        "    result+=arr[i]\n",
        "    if result>leftSum:\n",
        "      leftSum=result\n",
        "  result=0; rightSum=float('-infinity')\n",
        "  for i in range(mid+1,high+1):\n",
        "    result+=arr[i]\n",
        "    if result>rightSum:\n",
        "      rightSum=result\n",
        "  return leftSum+rightSum\n",
        "\n",
        "def maxSum(arr, low, high):\n",
        "  if low==high:\n",
        "    return arr[low]\n",
        "  mid=(low+high)//2\n",
        "  return max(maxSum(arr,low,mid),maxSum (arr, mid+1,high), maxCrossingSum(arr, low,mid, high))\n"
      ],
      "metadata": {
        "id": "fkw0eWuprdqZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr=[-2, -5, 6, -2, -3, 1, 5, -6]\n",
        "result-maxSum (arr, 0, len(arr)-1)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_lwK-5dltqPZ",
        "outputId": "d396c267-34a2-4a61-fa28-8529bd1b77b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-8 ===**"
      ],
      "metadata": {
        "id": "igx6b2WktuCN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def longestCommonPrefix(a):\n",
        "  size = len(a)\n",
        "# if size is 0, return empty string\n",
        "  if (size == 0):\n",
        "    return \"\"\n",
        "  if (size == 1):\n",
        "    return a[0]\n",
        "# sort the array of strings\n",
        "  a.sort()\n",
        "# find the minimum length from # first and last string\n",
        "  end = min(len(a[0]), len(a[size - 1]))\n",
        "# find the common prefix between\n",
        "# the first and last string\n",
        "  i = 0\n",
        "  while (i < end and\n",
        "        a[0][i] == a[size - 1][i]):\n",
        "    i += 1\n",
        "  pre = a[0][0: i]\n",
        "  return pre"
      ],
      "metadata": {
        "id": "uRtbGPX4tqen"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr=[\"geeksforgeeks\", \"geeks\", \"geek\",\"geezer\"]\n",
        "result=longestCommonPrefix(arr)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x-OnONXyxP7-",
        "outputId": "9d20e58e-d1e5-4acc-b1ac-70156204d701"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "gee\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr=[\"apple\",\"ape\",\"april\"]\n",
        "result=longestCommonPrefix(arr)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H_RYadVfxsXW",
        "outputId": "e6a73e8e-10ec-4078-c9d4-edfeb918ec5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ap\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-9 ===**"
      ],
      "metadata": {
        "id": "BWfvhSjyzhuF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Median dari dua array dengan divide dan conquer\n",
        "def medianOfArray(arr1, arr2,n):\n",
        "  m1=-1 #first number\n",
        "  m2=-1 #second Number\n",
        "  count=0\n",
        "  i=j=0\n",
        "  while count<n+1:\n",
        "    count+=1\n",
        "    if i==n: # i=-5 index error if arr1[i]<arr2[j] is checked\n",
        "      m1=m2\n",
        "      m2=arr2[0]\n",
        "      break\n",
        "    if j==n:\n",
        "      m1=m2\n",
        "      m2=arr1[0]\n",
        "      break\n",
        "    if arr1[i] <arr2[j]:\n",
        "      m1=m2\n",
        "      m2=arr1[i]\n",
        "      i+=1\n",
        "    else:\n",
        "      m1=m2\n",
        "      m2=arr2[j]\n",
        "      j+=1\n",
        "  return (m1+m2)//2"
      ],
      "metadata": {
        "id": "hw7BVd3ez0Ko"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr1=[1, 12, 15, 26, 38]\n",
        "arr2=[2, 13, 17, 30, 45]\n",
        "print(medianOfArray(arr1, arr2, len(arr1)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BSMqCc7x0O3Y",
        "outputId": "6bf1e52e-b17e-487a-e442-7cea736c555c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-10 ===**"
      ],
      "metadata": {
        "id": "DBdhJYlS1EAZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Solution(arr):\n",
        "  n = len(arr)\n",
        "  # If length of array is even\n",
        "  if n % 2 == 0:\n",
        "    z = n // 2\n",
        "    e = arr[z]\n",
        "    q = arr[z - 1]\n",
        "    ans - (e + q) / 2\n",
        "    return ans\n",
        "# If length of array is odd\n",
        "  else:\n",
        "    z = n // 2\n",
        "    ans = arr[z]\n",
        "    return ans"
      ],
      "metadata": {
        "id": "3AoIE26J1LSg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr1 = [-5, 3, 6, 12, 15]\n",
        "arr2 = [-12, -10, -6, -3, 4, 10] # Concatenating the two arrays\n",
        "arr3 = arr1 + arr2\n",
        "# Sorting the resultant array\n",
        "arr3.sort()\n",
        "print(\"Median = \", Solution(arr3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-WASKF9z2K2W",
        "outputId": "609f3615-aa5e-4dab-bd6b-337b30d66519"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Median =  3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-11 ===**"
      ],
      "metadata": {
        "id": "FwcrVdts2PLa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Floor in sorted array\n",
        "def floorSorted (arr, low, high, x):\n",
        "#print (Low, high)\n",
        "  if low>high:\n",
        "    return -1\n",
        "  if arr[low]>x:\n",
        "#print(\"inside\")\n",
        "    return -1\n",
        "  if arr[high]<=x:\n",
        "    return arr[high]\n",
        "  mid=(low+high)//2\n",
        "  if arr[mid]==x:\n",
        "    return arr[mid]\n",
        "  if mid>0 and x>=arr[mid-1] and arr[mid]>x:\n",
        "    return arr[mid-1]\n",
        "  if mid<high and x<arr[mid+1] and x>=arr[mid]:\n",
        "    return arr[mid]\n",
        "  if x>arr[mid]:\n",
        "    return floorSorted (arr, mid+1, high,x)\n",
        "  else:\n",
        "    return floorSorted (arr, low, mid-1,x)"
      ],
      "metadata": {
        "id": "Zs0ggl3X2S9i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr=[1,2,8,10,12,14,19]\n",
        "x=5\n",
        "print(floorSorted(arr,0,len(arr)-1,x))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FOdnmRrC3OFb",
        "outputId": "cfd56477-903c-42ef-ddd7-4f7f5c0e1441"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-12 ===**"
      ],
      "metadata": {
        "id": "HaMweksH3gck"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mencari nilai terdekat dengan metode divide dan conquer\n",
        "def closestNumber(arr, low, high,x):\n",
        "  if low>high:\n",
        "    return -1\n",
        "  if arr[high]<=x:\n",
        "    return arr[high]\n",
        "  if arr[low] >=x:\n",
        "    return arr[low]\n",
        "  mid=(low+high)//2\n",
        "  if arr[mid] ==x:\n",
        "    return arr[mid]\n",
        "  abs_mid=abs(arr[mid]-x)\n",
        "  if mid>0:\n",
        "    abs_left=abs (arr[mid-1]-x)\n",
        "    if abs_left<abs_mid:\n",
        "      return closestNumber (arr, low, mid-1,x)\n",
        "  if mid<high:\n",
        "    abs_right=abs (arr[mid+1]-x)\n",
        "    if abs_right<abs_mid:\n",
        "      return closestNumber(arr, mid+1,high,x)\n",
        "#print('after')\n",
        "  return arr[mid]"
      ],
      "metadata": {
        "id": "N9pwXF2Z3mEJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr=[2, 5, 6, 7, 8, 8, 9]"
      ],
      "metadata": {
        "id": "LKYiI9rG4z3U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = 9\n",
        "print(closestNumber(arr,0,len(arr)-1,x))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hw2E_v6m5EGK",
        "outputId": "0c079d5e-2a60-4f76-84fe-efd0e2b7928e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **=== LATIHAN KE-13 ===**"
      ],
      "metadata": {
        "id": "LUngkj9h5Ksg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def find_closest(lst, k):\n",
        "  lst.sort()\n",
        "  closest_num = lst[0]\n",
        "  for num in lst:\n",
        "    if abs (num - k) < abs(closest_num - k):\n",
        "      closest_num = num\n",
        "    if num > k:\n",
        "      break\n",
        "  return closest_num"
      ],
      "metadata": {
        "id": "yA2xxqTi5My2"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lst = [3.64, 5.2, 9.42, 9.35, 8.5, 8]\n",
        "k = 9.1\n",
        "print(find_closest(lst, k))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QV8-D4Bwql6R",
        "outputId": "fa8a5af0-b0f4-4d55-ae39-abdccc5c4401"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9.35\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst=[2,5,5,7,8,8,9]\n",
        "k = 6\n",
        "print (find_closest(lst, k))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vg2AOgP5qNRM",
        "outputId": "bd1dfd78-4737-465b-d067-3ea7a5a594dd"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Mencari Fixed Point dengan metode divide dan conquer\n",
        "def fixedPoint(arr, low, high):\n",
        "  if low>high:\n",
        "    return -1\n",
        "  if arr[high]==high:\n",
        "    return arr[high]\n",
        "  if arr[low]==low:\n",
        "    return arr[low]\n",
        "  mid=(low+high)//2\n",
        "  if arr[mid]==mid:\n",
        "    return arr[mid]\n",
        "  if mid>arr[mid]:\n",
        "    return fixedPoint (arr, mid+1, high)\n",
        "  else:\n",
        "    return fixedPoint(arr, low, mid-1)"
      ],
      "metadata": {
        "id": "BCGszmzuq5BD"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr=[9,1,4,5,2]"
      ],
      "metadata": {
        "id": "5GOVVctVrXFk"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(fixedPoint(arr, 0,len (arr)-1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JtYk28LErjoW",
        "outputId": "8b18af70-3d81-4ce2-dced-445bea75ef12"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    }
  ]
}
